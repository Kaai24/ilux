#!/bin/bash

# This script is in the public domain.
# You can use, modify, and distribute it without any restrictions.
# For more information, see <https://creativecommons.org/publicdomain/zero/1.0/>.

# Made by kaai24.eu for the Ilux distribution.

version=2.241120

# Config:

#Limit for yellow greater than use%
warn1=79

#Limit for yellow greater than use% while less than minfreespace
warn2=89

#Define below which amount of available G it should be colored red
minfreespace=50

#Limit for red greater than use%
warn3=97

#Default options
arguments="--total"

# ---

source $HOME/.config/ilux/df.conf 2>/dev/null || source /opt/ilux/conf/df.conf 2>/dev/null

help() {
  help="$(/bin/df --help)"
  header="$(echo -e "$help" | head -n 4)"
  copyright="$(echo -e "$help" | tail -n 3)"
  help="$(echo -e "$help" | tail -n +4 | head -n -3)"
  
  echo -e "$header"
  
  echo -e "\nDefaults and coloring options can be set in /opt/ilux/conf/df.conf"
  echo -e ""
  echo -e "Ilux additions:"
  echo -e "      --file FILE       Read a df output from a file"
  echo -e "      --filter TERM     limit listing to matches (uses egrep)"
  echo -e "                        use \"TERM|TERM\" for multiple filters"
  echo -e "      --config          show configuration details about the wrapper"
  
  echo -e "$help"
  
  echo -e "\nExamples\n"
  echo -e "  df -h --filter \"sd|mnt\""
  echo -e "  df --file \$(ssh user@remotesystem df -h)\n"
  
  echo -e "$copyright"
  echo -e "\nOutput has been modified by the wrapper for Ilux\nSee --version for details"
  
  exit
}

config() {
  echo -e "The config for the wrapper is expected at $HOME/.config/ilux/df.conf with:"
  awk '/^# Config:/ {flag=1; next} /^# ---/ {flag=0} flag' $0
  
  exit
}

bugfixes() {
  
  # Bug workaround for gnulib like in df Version 8.32 in Debian 11, Ubuntu 20.04 and flatpak
  # Bug in GNU: https://lists.gnu.org/archive/html/bug-gnulib/2021-02/msg00053.html
  # Fix: https://git.savannah.gnu.org/gitweb/?p=gnulib.git;a=commitdiff;h=9a38d499ca16f2f4304992eb1ab0894cd0b478e1
  # Bug in Flatpak: https://github.com/flatpak/xdg-desktop-portal/issues/553
  # Fix: still open, on 10.08.2024
  input=$(echo "$input" | grep -v /run/user/1000/doc)
}

fileInput() {
  if [ -z "$input" ] || [[ "$input" == "--file" ]]; then
    echo "Missing argument for df --file FILENAME"
    exit 1
  fi
  
  if [ -f "$input" ]; then
    # input is a file
    input=$(cat "$input")
  
  else
    # input is multiline text
    true
  fi
}

filter() {
  
  if [ -z "$filter" ] || [[ "$filter" == "--filter" ]]; then
    echo "Missing argument for df --file FILENAME"
    exit 1
  fi
  
  if echo -e "$input" | grep -q /dev/; then
    header="$(echo "$input" | grep Mounted)"
    input="$(echo "$input" | grep -v Mounted | grep -Ei "$filter")"
    
    if [[ -z $input ]]; then
      echo "No mounts with $filter"
      exit 1
    fi
    
    input="$header\n$input"
  fi
}

processDf() {
  
  # Define color codes
  YELLOW='\033[1;33m'
  RED='\033[1;31m'
  RESET='\033[0m'

  # Run df command, processing each line
  echo -e "$input" | while read -r line; do
      # Extract the "Use%" and "Avail" columns (5th and 4th columns)
      usep=$(echo "$line" | awk '{print $5}' | sed 's/%//')
      avail=$(echo "$line" | awk '{print $4}')

      # Convert Avail to a number (removing the unit G)
      avail_value=$(echo "$avail" | sed 's/[A-Za-z]//g')
      
      # If avail_value is in T multiply by 1024
      if [[ $avail == *T* ]]; then
        avail_value=$(echo "$avail_value * 1024" | bc)
      fi
      
      # remove the decimal point
      if [[ $avail_value == *.* ]]; then
        avail_value=$(echo "$avail_value" | awk '{printf "%.0f", $0}')
      fi

      # If "Use%" is not empty and is a valid number, apply color rules
      if [[ "$usep" =~ ^[0-9]+$ ]]; then
          
          if (( usep > $warn3 )); then
              # If "Use%" is greater than (default) 97%, color the line red
              echo -e "${RED}$line${RESET}"
              
          elif (( usep > $warn2 )) && (( avail_value < $minfreespace )); then
              # If "Use%" is greater than (default) 89% and "Avail" is < minfreespace, color the line red
              echo -e "${RED}$line${RESET}"
              
          elif (( usep > $warn1 )); then
              # If "Use%" is greater than (default) 79%, color the line yellow
              echo -e "${YELLOW}$line${RESET}"
              
          else
              # If "Use%" is less than or equal to (default) 79%, print the line normally
              echo "$line"
          fi
      else
          # Print the header or any line that doesn't have "Use%" (like non-number lines)
          echo "$line"
      fi
  done
}

#@ Parse options
args=("$@")
i=0
while [ $i -lt ${#args[@]} ]; do
  case "${args[$i]}" in
    --file)
      inputfile=true
      input="${args[$(($i+1))]}"
      
      ((i+=2))
      continue
      ;;
    --filter)      
      filter="${args[$(($i+1))]}"
      
      #Skip next ARG that should be input to this option
      args[i]="${args[$(($i+1))]}"
            
      ((i+=2))
      continue
      ;;
    --help)
      help
      ;;
    --config)
      config
      ;;
    --version)
      /bin/df --version
      echo -e "\nWrapper v$version for Ilux, written by kaai24.eu"
      echo -e "Details at kaai24.eu/Ilux-commands"
      exit
      ;;
    *)
      # filter non matching options
      dfargs+="${args[$i]} "
      ;;
   esac
   ((i++))
done

if [ -v inputfile ]; then
  fileInput
  
else
  input="$(/bin/df $dfargs $arguments 2>&1)"
fi

bugfixes
if [ -v filter ]; then filter; fi
processDf
