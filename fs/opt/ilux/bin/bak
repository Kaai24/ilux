#!/bin/bash -e

# Easy creation and restoration of local backups

version=1.241024

# Timestamp to append to filenames
# %year%month%day-%Hour%Minute in two digits, %S for %Second, %V for ISO-8601 weeknr, %b month like "Oct", %a day like "Thu" if needed.
# See "man date" or https://linux.die.net/man/1/date
tstamp=$(date +"%y%m%d-%H%M")

# Compression options (extract uses archive suffix)
# --bzip2, --xz, --lzip, --lzma, --lzop, --gzip, --zstd
compressmode="--gzip"

# Default options (no spaces or -)
arguments=""

source ~/.config/ilux/bak.conf 2>/dev/null || source /opt/ilux/conf/bak.conf 2>/dev/null

help() {
  echo "Usage: $0 [e|c|d|q|r|s|v|x|z] TARGET"
  echo ""
  echo "Creates a backup of a file or directory with the current time in the name"
  echo ""
  echo "-c Creates a copy, not a compressed file (default for files)"
  echo "-r Restores (extracts) the content of a tar backup (not overwriting)"
  echo "-s Create backups in a bak/ subfolder"
  echo "-x Same as -r"
  echo "-z Creates a compressed tar file (default for directories)"
  echo ""
  echo "-e Encrypts a file using openssl AES-256-CBC with salt, asks for a password"
  echo "-d Decrypts a file"
  echo ""
  echo "-q Less output but not quiet. Can be used together with -v"
  echo "-v Verbose mode for more details from cp and tar"
  echo ""
  echo "--help    Displays this help"
  echo "--version Output information about this"
  echo ""
  echo "Settings for timestamp and compression in /opt/ilux/conf/bak.conf"
  echo "Compression is set to $(echo "$compressmode" | cut -c 3-)"
}

if [ -z "$1" ]; then
  echo "Missing input"
  echo "Use --help for usage details"
  exit 1
fi

case "$1" in
  --help)
    help
    exit 0
    ;;
  --version)
    echo -e "bak v$version\n"
    echo -e "Written for Ilux by kaai24.eu"
    echo -e "Details at kaai24.eu/Ilux-commands"
    exit 0
    ;;
esac

# Evaluate inputs
if [[ -n "$3" ]]; then
  echo "Too many arguments!"
  echo "For multiple options use the merged format like -ze or -xdv"
  exit 1
fi

if [[ "$1" == -* ]]; then
  options="$1"
  target="$2"
else
  options="$2"
  target="$1"
fi

# Apply defaults
options="$options$arguments"

# Check if options are present
if [[ "$options" == -* ]]; then

  # Options
  if [[ "$options" == *"c"* ]]; then copy=1; fi
  if [[ "$options" == *"e"* ]]; then encrypt=1; fi
  if [[ "$options" == *"q"* ]]; then quiet=1; fi
  if [[ "$options" == *"r"* ]]; then extract=1; fi
  if [[ "$options" == *"s"* ]]; then subdir=1; fi
  if [[ "$options" == *"x"* ]]; then extract=1; fi
  if [[ "$options" == *"z"* ]]; then compress=1; fi
  
  # Verbose argument
  if [[ "$options" == *"v"* ]]; then
    verbose="-v"
  else
    verbose=""
  fi
  
  # Decrypt
  if [[ "$options" == *"d"* ]]; then
    echo "Decrypting $target"
    tmp="$target.tmp"
    openssl enc -aes-256-cbc -d -pbkdf2 -in "$target" -out "$tmp"
    
    target="$(echo "$target" | rev | cut -d'.' -f2- | rev)"
    mv "$tmp" "$target"
    
    # If there is no extract
    if [ ! -v extract ]; then
      # Remove extensions from filename string
      target=$(echo "$target" | rev | cut -d'.' -f3- | rev)
      
      if [ ! -v quiet ]; then
        du -h "$(realpath $target)"*
      fi
      
      exit
    fi
    
  fi
  
  # Restore / extract
  if [ -v extract ]; then
    echo "Extracting $target"
    tar --keep-old-files $verbose -xaf "$target"
    
    # Clean up decrypted archive
    if [[ "$options" == *"d"* ]]; then rm "$target"; fi
    
    # Remove extensions from filename string
    target=$(echo "$target" | rev | cut -d'.' -f4- | rev)
    
    if [ ! -v quiet ]; then
      if [ -v verbose ]; then echo ""; fi
      
      du -h "$(realpath $target)"*
    fi
    
    exit
  fi
  
fi
  
# Create a backup
if [ ! -e "$target" ]; then

  echo "Can not find $(realpath $target)"
  echo "Use --help for usage details"
  exit 1

else
  if [ -v subdir ]; then
    echo "Writing to bak/"
    mkdir -p bak/
    newfile="bak/$target.$tstamp"
  else
    newfile="$target.$tstamp"
  fi
  
  # Make tar
  if [[ -d "$target" && -z "$copy" ]] || [[ -v compress ]]; then
    
    if   [[ "$compressmode" == "--bzip2" ]]; then ctype="bz2"
    elif [[ "$compressmode" == "--xz" ]];    then ctype="xz"
    elif [[ "$compressmode" == "--lzip" ]];  then ctype="lz"
    elif [[ "$compressmode" == "--lzma" ]];  then ctype="lzma"
    elif [[ "$compressmode" == "--lzop" ]];  then ctype="lzo"
    elif [[ "$compressmode" == "--gzip" ]];  then ctype="gz"
    elif [[ "$compressmode" == "--zstd" ]];  then ctype="zst"
    else echo "Unexpected compressmode: $compressmode" && exit 1
    fi
    newfile="$newfile.tar.$ctype"
    
    echo "Using tar with $(echo "$compressmode" | cut -c 3-) for $newfile"
    tar -c $verbose "$compressmode" -f "$newfile" "$target"
  
  # Just copy
  else
    if [ -f "$target" ]; then newfile="$newfile.bak"; fi
    echo "Copy to $newfile"
    cp $verbose -a "$target" "$newfile"
  fi
  
  # Encrypt
  if [[ -v encrypt ]] && [ -f "$newfile" ]; then
    echo "Encrypting with openssl AES-256-CBC and salt"
    openssl enc -aes-256-cbc -pbkdf2 -salt -in "$newfile" -out "$newfile".enc
    
    rm "$newfile"
    newfile="$newfile.enc"
  
  elif [[ -v encrypt ]] && [ -d "$newfile" ]; then
    echo "Can't encrypt a folder. It has to be an archive"
  fi
  
  # Result
  if [ ! -v quiet ]; then
    if [ -v verbose ]; then
      echo ""
    fi
    
    if [ -v subdir ]; then
      du -sh "$(realpath $target)"
      du -sh "$(realpath $newfile)"
    else
      du -sch "$(realpath $target)"*
    fi
  fi
  
fi
